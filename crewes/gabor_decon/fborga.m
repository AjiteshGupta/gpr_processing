function [tvs,fout,t]=fborga(signal,t,fwidth,finc,padflag)% FBORGA: forward Borga transform with Gaussian analysis windowing%% [tvs,fout]=fborga(signal,t,fwidth,finc,padflag)% % FBORGA performs a forward Borga transform of a seismic trace using% modified Gaussian analysis windows. The Borga transform is implemented by% a forward Fourier transform, frequency slicing using modified Gaussian% windows, and then inverse Fourier transfoming each slice. The output is a% 2D matrix, called tvs, with the row coordinate being time and the column% coordinate being the center frequency of each frequency slice. This tvs,% or time variant spectrum, is also called the Borga spectrum. The Borga% spectrum is a time-frequency decomposition that is the formal adjoint of% the Gabor transform (hint: the name Borga is a joke). While the Gabor% transform is complex valued, the Borga transform is real valued.% Essentially each column (trace) of the Borga transform is a filter slice% of the input signal. The Borga spectrum may be inverted s=sum(tvs,2);% where s will be the reconstructed trace.%% signal= input trace % t= time coordinate vector for signal.% fwidth= width (Hertz) of the Gaussian window.% finc= shift (Hertz) between windows.% Note: Generally finc < fwidth.% padflag= if 0, the trace is transformed without padding. If 1,%   it is padded with zeros to the next power of 2 (unless it already is%   a power of 2)% ************** default padflag = 1 ***************% tvs= output time-variant spectrum (complex valued). Each column is a time%       series for a particular frequency.% fout= row vector giving the column coordinate of tvs% NOTE: the column vector giving the row coordinate of tvs is the same as%   the input t%% by G.F. Margrave, July 2009-2014%% NOTE: It is illegal for you to use this software for a purpose other% than non-profit education or research UNLESS you are employed by a CREWES% Project sponsor. By using this software, you are agreeing to the terms% detailed in this software's Matlab source file. % BEGIN TERMS OF USE LICENSE%% This SOFTWARE is maintained by the CREWES Project at the Department% of Geology and Geophysics of the University of Calgary, Calgary,% Alberta, Canada.  The copyright and ownership is jointly held by % its author (identified above) and the CREWES Project.  The CREWES % project may be contacted via email at:  crewesinfo@crewes.org% % The term 'SOFTWARE' refers to the Matlab source code, translations to% any other computer language, or object code%% Terms of use of this SOFTWARE%% 1) Use of this SOFTWARE by any for-profit commercial organization is%    expressly forbidden unless said organization is a CREWES Project%    Sponsor.%% 2) A CREWES Project sponsor may use this SOFTWARE under the terms of the %    CREWES Project Sponsorship agreement.%% 3) A student or employee of a non-profit educational institution may %    use this SOFTWARE subject to the following terms and conditions:%    - this SOFTWARE is for teaching or research purposes only.%    - this SOFTWARE may be distributed to other students or researchers %      provided that these license terms are included.%    - reselling the SOFTWARE, or including it or any portion of it, in any%      software that will be resold is expressly forbidden.%    - transfering the SOFTWARE in any form to a commercial firm or any %      other for-profit organization is expressly forbidden.%% END TERMS OF USE LICENSEif(nargin<5); padflag=1; endp=1;nt=length(signal);if(padflag)    nt=2^(nextpow2(nt));end%forward Fourier transform[Spectrum,f]=fftrl(signal,t,0,nt);fmin=f(1);%make sure we have column vectorsm=size(Spectrum,1);if(m==1); Spectrum=Spectrum.'; endm=size(f,1);if(m==1); f=f'; end%test for even and odd lengths of spectrum%need this because the Gaussian POU function always returned an even length%window. If Gaussian_pou is modified to remove this "feature" then this%code should be dropped.ls=length(Spectrum);iuse=1:ls;if(isodd(ls))    Spectrum=[Spectrum;0];%remove this later    f=[f;f(end)+f(2)-f(1)];end%build first window and POU norm factorgdb=inf;[g,norm_factor,fnotvec,nwin]=gaussian_upou(f,fmin,fwidth,finc,0,0,gdb,0);%now loop over windows and build the tvstvs=zeros(nt,nwin);fout=zeros(1,nwin);for k=1:nwin    fnow=fnotvec(k);    fout(k)=fnow;    %make the windows    g=gaussian_upou(f,fnow,fwidth,finc,norm_factor,fnotvec,gdb,0);    if(p~=1)        if(p==0)            g=ones(size(f));        else            g=g.^p;        end    end    %inverse Fourier transform    S=Spectrum.*g;    tvs(:,k)=ifftrl(S(iuse),f(iuse));end